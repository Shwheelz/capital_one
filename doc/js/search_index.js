var search_data = {"index":{"searchIndex":["account","atm","bill","branch","capitalone","config","customer","net","transaction","accountbaseurl()","apikey()","apikey()","apikey()","apikey()","apikey()","apikey()","baseurl()","createaccount()","createbill()","createtransaction()","customerbaseurl()","deleteaccount()","deletebill()","deletetransaction()","getall()","getall()","getall()","getall()","getallbyaccountid()","getallbyaccountid()","getallbycustomerid()","getallbycustomerid()","getallbytype()","getone()","getone()","getone()","getone()","getonebyaccountid()","getonebyaccountidbillid()","getonebyaccountidtransactionid()","getonebycustomeridbillid()","updateaccount()","updatebill()","updatecustomer()","url()","url()","url()","url()","url()","url()","urlwithacctentity()","urlwithentity()","urlwithentity()","urlwithentity()","urlwithentity()","urlwithentity()","gemfile","guardfile","license","readme","rakefile","setup","capital_one.gemspec"],"longSearchIndex":["account","atm","bill","branch","capitalone","config","customer","net","transaction","bill::accountbaseurl()","account::apikey()","atm::apikey()","bill::apikey()","branch::apikey()","customer::apikey()","transaction::apikey()","config#baseurl()","account::createaccount()","bill::createbill()","transaction::createtransaction()","bill::customerbaseurl()","account::deleteaccount()","bill::deletebill()","transaction::deletetransaction()","account::getall()","atm::getall()","branch::getall()","customer::getall()","bill::getallbyaccountid()","transaction::getallbyaccountid()","account::getallbycustomerid()","bill::getallbycustomerid()","account::getallbytype()","account::getone()","atm::getone()","branch::getone()","customer::getone()","customer::getonebyaccountid()","bill::getonebyaccountidbillid()","transaction::getonebyaccountidtransactionid()","bill::getonebycustomeridbillid()","account::updateaccount()","bill::updatebill()","customer::updatecustomer()","account::url()","atm::url()","bill::url()","branch::url()","customer::url()","transaction::url()","customer::urlwithacctentity()","account::urlwithentity()","atm::urlwithentity()","branch::urlwithentity()","customer::urlwithentity()","transaction::urlwithentity()","","","","","","",""],"info":[["Account","","Account.html","",""],["Atm","","Atm.html","",""],["Bill","","Bill.html","",""],["Branch","","Branch.html","",""],["CapitalOne","","CapitalOne.html","",""],["Config","","Config.html","","<p>Capital One API Gem\n\n<pre>This is a gem to wrap the Capital One public API.\nVisit api.reimaginebanking.com for ...</pre>\n"],["Customer","","Customer.html","",""],["Net","","Net.html","",""],["Transaction","","Transaction.html","",""],["accountBaseUrl","Bill","Bill.html#method-c-accountBaseUrl","()",""],["apiKey","Account","Account.html#method-c-apiKey","()",""],["apiKey","Atm","Atm.html#method-c-apiKey","()",""],["apiKey","Bill","Bill.html#method-c-apiKey","()",""],["apiKey","Branch","Branch.html#method-c-apiKey","()",""],["apiKey","Customer","Customer.html#method-c-apiKey","()",""],["apiKey","Transaction","Transaction.html#method-c-apiKey","()",""],["baseUrl","Config","Config.html#method-i-baseUrl","()",""],["createAccount","Account","Account.html#method-c-createAccount","(custID, account)","\n<pre>*** POST ***</pre>\n<p>createAccount\n<p>Creates a new account Parameters: CustomerID, accountHash Returns the http\nresponse …\n"],["createBill","Bill","Bill.html#method-c-createBill","(accountId, bill)","\n<pre>*** POST ***</pre>\n<p>createBill\n<p>create a new bill on an associated account ID Parameters: AccountId,\nBillJson  …\n"],["createTransaction","Transaction","Transaction.html#method-c-createTransaction","(toAcc, json)","\n<pre>Create a new transaction between 2 accounts</pre>\n<p>createTransaction\n<p>Creates a new transaction. Parameters: toAccountId, …\n"],["customerBaseUrl","Bill","Bill.html#method-c-customerBaseUrl","()",""],["deleteAccount","Account","Account.html#method-c-deleteAccount","(accountId)","\n<pre>*** DELETE ***</pre>\n<p>deleteAccount\n<p>delete a given account by accountId. Parameters: AccountId. Returns the\nhttp …\n"],["deleteBill","Bill","Bill.html#method-c-deleteBill","(accountId, billId)","\n<pre>*** DELETE ***</pre>\n<p>deleteBill\n<p>delete a bill by id from a given account. Parameters: Accountid, billid.\nReturns …\n"],["deleteTransaction","Transaction","Transaction.html#method-c-deleteTransaction","(accID, transID)","<p>deleteTransaction\n<p>Deletes a specified transaction from a specified account. Parameters:\nAccountID, TransactionID …\n"],["getAll","Account","Account.html#method-c-getAll","()","\n<pre>*** GET ***\n= getAll\nReturns an array of hashes getting all the customers.</pre>\n<p>Each index in the array is …\n"],["getAll","Atm","Atm.html#method-c-getAll","()","\n<pre>*** GET ***</pre>\n<p>getAll\n<p>Returns all ATMs as an array of hashes.\n"],["getAll","Branch","Branch.html#method-c-getAll","()","\n<pre>*** GET ***</pre>\n<p>getAll\n\n<pre>Get all the branches</pre>\n"],["getAll","Customer","Customer.html#method-c-getAll","()","\n<pre>*** GET ***</pre>\n<p>getAll\n<p>Gets all customers the API key has acccess to. Returns an array of hashes.\n"],["getAllByAccountId","Bill","Bill.html#method-c-getAllByAccountId","(accountId)","<p>getAllByAccountId\n<p>Get all bills for a specific account Parameters: accountId Returns an array\nof hashes …\n"],["getAllByAccountId","Transaction","Transaction.html#method-c-getAllByAccountId","(accID)","\n<pre>*** GET ***</pre>\n<p>getAllByAccountId\n<p>Get all transactions for a specific account Returns an array of hashes.\nParameters: …\n"],["getAllByCustomerId","Account","Account.html#method-c-getAllByCustomerId","(customerId)","<p>getAllByCustomerId\n<p>Returns all accounts associated with a given customer ID as an array of\nhashes.\n"],["getAllByCustomerId","Bill","Bill.html#method-c-getAllByCustomerId","(customerId)","<p>getAllByCustomerId\n\n<pre>Get all bills for a specific customer</pre>\n<p>Parameters: customerId Returns the customer as …\n"],["getAllByType","Account","Account.html#method-c-getAllByType","(type)","<p>getAllByType\n<p>Gets all accounts of a given type.\n<p>Parameters:\n"],["getOne","Account","Account.html#method-c-getOne","(id)","<p>getOne\n<p>Returns the account specified by it&#39;s account ID.\n<p>Parameters:\n"],["getOne","Atm","Atm.html#method-c-getOne","(id)","<p>getOne\n<p>Parameters: ATMid Returns the ATM that has the given ID.\n"],["getOne","Branch","Branch.html#method-c-getOne","(id)","<p>getOne\n<p>Get a branch by it&#39;s id Parameters: BranchId Returns a hash with the\nspecified branch.\n"],["getOne","Customer","Customer.html#method-c-getOne","(custId)","<p>getOne\n<p>Gets the specified customer&#39;s information. Parameters tested - Returns\na hash.\n"],["getOneByAccountId","Customer","Customer.html#method-c-getOneByAccountId","(accID)","<p>getOneByAccountId\n<p>Get the customer for the given account. Parameters: AccountId Returns a\nhash with the …\n"],["getOneByAccountIdBillId","Bill","Bill.html#method-c-getOneByAccountIdBillId","(accountId, billId)","<p>getOneByAccountIdBillId\n<p>Get a specific bill from a specific account Parameters: AccountId, BillId\nReturns …\n"],["getOneByAccountIdTransactionId","Transaction","Transaction.html#method-c-getOneByAccountIdTransactionId","(accID, tranID)","<p>getOneByAccountIdTransactionId\n\n<pre>Get a specific transaction from a specific account.</pre>\n<p>Parameters: AccountID …\n"],["getOneByCustomerIdBillId","Bill","Bill.html#method-c-getOneByCustomerIdBillId","(customerId, billId)","<p>getOneByCustomerIdBillId\n\n<pre>Get a specific bill from a specific customer.</pre>\n<p>Parameters: customerId, BillId  …\n"],["updateAccount","Account","Account.html#method-c-updateAccount","(accountId, account)","\n<pre>*** PUT ***</pre>\n<p>updateAccount\n<p>Updates an account&#39;s nickname. Parameters: AccountID, AccountHash\nReturns …\n"],["updateBill","Bill","Bill.html#method-c-updateBill","(accountId, billId, bill)","\n<pre>*** POST ***</pre>\n<p>updateBill\n<p>Updates an account&#39;s nickname by id with given json data.  Parameters:\nAccountId …\n"],["updateCustomer","Customer","Customer.html#method-c-updateCustomer","(custID, customer)","\n<pre>*** PUT ***</pre>\n<p>updateCustomer\n<p>Updates a customer by id with given json data.  Parameters: CustomerId,\nCustomerJson …\n"],["url","Account","Account.html#method-c-url","()",""],["url","Atm","Atm.html#method-c-url","()",""],["url","Bill","Bill.html#method-c-url","()",""],["url","Branch","Branch.html#method-c-url","()",""],["url","Customer","Customer.html#method-c-url","()",""],["url","Transaction","Transaction.html#method-c-url","()",""],["urlWithAcctEntity","Customer","Customer.html#method-c-urlWithAcctEntity","()",""],["urlWithEntity","Account","Account.html#method-c-urlWithEntity","()",""],["urlWithEntity","Atm","Atm.html#method-c-urlWithEntity","()",""],["urlWithEntity","Branch","Branch.html#method-c-urlWithEntity","()",""],["urlWithEntity","Customer","Customer.html#method-c-urlWithEntity","()",""],["urlWithEntity","Transaction","Transaction.html#method-c-urlWithEntity","()",""],["Gemfile","","Gemfile.html","","<p>source &#39;rubygems.org&#39;\n<p># Specify your gem&#39;s dependencies in capital_one.gemspec gemspec\n"],["Guardfile","","Guardfile.html","","<p>guard &#39;rspec&#39; do\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># watch /lib/ files</span>\n<span class=\"ruby-identifier\">watch</span>(<span class=\"ruby-regexp\">%r{^lib/(.+).rb$}</span>) <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">m</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-node\">&quot;spec/#{m[1]}_spec.rb&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["LICENSE","","LICENSE_txt.html","","<p>The MIT License (MIT)\n<p>Copyright © 2015 Shane Besong\n<p>Permission is hereby granted, free of charge, to …\n"],["README","","README_md.html","","<p>CapitalOne\n<p>The capital_one gem interfaces Ruby developers with the Capital One API.\nSimply require &#39;capital_one&#39; …\n"],["Rakefile","","Rakefile.html","","<p>require &#39;rspec/core/rake_task&#39; require &#39;bundler/gem_tasks&#39;\n<p># Default directory to look …\n"],["setup","","bin/setup.html","","<p>#!/bin/bash set -euo pipefail IFS=$&#39;nt&#39;\n<p>bundle install\n<p># Do any other automated setup that you …\n"],["capital_one.gemspec","","capital_one_gemspec.html","","<p>lib = File.expand_path(&#39;../lib&#39;, __FILE__) $LOAD_PATH.unshift(lib)\nunless $LOAD_PATH.include?(lib) …\n"]]}}